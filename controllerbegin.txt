Controller code

using Microsoft.AspNetCore.Mvc;
using GOLApp.Api.Data;
using Npgsql.Replication;
namespace GOLApp.Api.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class GOLController : ControllerBase
    {
        private readonly GolData context;

        private readonly GoLService service;

        private readonly ILogger<GOLController> _logger;

        public GOLController(ILogger<GOLController> logger, GolData context, GoLService service)
        {
            _logger = logger;
            this.service= service;
            this.context = context;
        }

        [HttpGet(Name = "GetSubTier")]
        public async Task<ICollection<SubTier>> Get()
        {

            return await service.GetSubTierList();
            
        }
    }
}

service code

namespace GOLApp.Api.Data
{
    public class GoLService
    {
        private readonly GolData context;

        public GoLService(GolData context)
        {
            this.context = context;
        }

        internal async Task<ICollection<SubTier>> GetSubTierList()
        {
            var subtier = context.SubTiers.ToList();
            return subtier;
        }

    }
}



migration applier

using Microsoft.EntityFrameworkCore;
using GOLApp.Api.Data;

namespace GOLApp;

public class MigrationApplier : IHostedService
{
    private readonly IServiceProvider service;
    private readonly ILogger<MigrationApplier> logger;

    public MigrationApplier(IServiceProvider service, ILogger<MigrationApplier> logger)
    {
        this.service = service;
        this.logger = logger;
    }

    public Task StartAsync(CancellationToken cancellationToken)
    {
        using (var scope = service.CreateScope())
        {
            try
            {
                var context = scope.ServiceProvider.GetRequiredService<GolData>();
                logger.LogInformation("Applying migrations...");
                context.Database.Migrate();
                logger.LogInformation("Migrations applied successfully!");
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "***  Trouble applying migrations!");

                throw;
            }
            return Task.CompletedTask;
        }
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        return Task.CompletedTask;
    }
}








{
  "connection_string": {
    "init": "Server=joshgarrett2022.postgres.database.azure.com;Database=finalproject;Port=5433;User Id=GG;Password=Drowss4p;"
  }
}